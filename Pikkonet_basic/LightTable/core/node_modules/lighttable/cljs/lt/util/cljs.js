// Compiled by ClojureScript 0.0-2138
goog.provide('lt.util.cljs');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('clojure.string');
cljs.core._STAR_print_fn_STAR_ = (function (x){if(cljs.core.truth_((function (){var and__3396__auto__ = x;if(cljs.core.truth_(and__3396__auto__))
{return (cljs.core.not_EQ_.call(null,x,"")) && (cljs.core.not_EQ_.call(null,x,"\n"));
} else
{return and__3396__auto__;
}
})()))
{return console.log(clojure.string.trim.call(null,x));
} else
{return null;
}
});
cljs.core.ChunkedCons.prototype.cljs$core$INext$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = (function (this$){var this$__$1 = this;return cljs.core._seq.call(null,cljs.core._rest.call(null,this$__$1));
});
(cljs.core.ISeqable["null"] = true);
(cljs.core._seq["null"] = (function (coll){return null;
}));
cljs.core.RSeq.prototype.cljs$core$INext$ = true;
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = (function (this$){var this$__$1 = this;return cljs.core._seq.call(null,cljs.core._rest.call(null,this$__$1));
});
global.String.prototype.cljs$core$ISeqable$ = true;
global.String.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){var coll__$1 = this;if(cljs.core.truth_((function (){var and__3396__auto__ = coll__$1;if(cljs.core.truth_(and__3396__auto__))
{return !((coll__$1.length === 0));
} else
{return and__3396__auto__;
}
})()))
{return (new cljs.core.IndexedSeq((new String(coll__$1)),0));
} else
{return null;
}
});
global.String.prototype.cljs$core$IFn$ = true;
global.String.prototype.call = (function() {
var G__13536 = null;
var G__13536__2 = (function (self__,coll){var self____$1 = this;var this$ = self____$1;return cljs.core.get.call(null,coll,this$.toString());
});
var G__13536__3 = (function (self__,coll,not_found){var self____$1 = this;var this$ = self____$1;return cljs.core.get.call(null,coll,this$.toString(),not_found);
});
G__13536 = function(self__,coll,not_found){
switch(arguments.length){
case 2:
return G__13536__2.call(this,self__,coll);
case 3:
return G__13536__3.call(this,self__,coll,not_found);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
return G__13536;
})()
;
global.String.prototype.apply = (function (self__,args13535){var self____$1 = this;return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone.call(null,args13535)));
});
global.String.prototype.cljs$core$IFn$_invoke$arity$1 = (function (coll){var this$ = this;return cljs.core.get.call(null,coll,this$.toString());
});
global.String.prototype.cljs$core$IFn$_invoke$arity$2 = (function (coll,not_found){var this$ = this;return cljs.core.get.call(null,coll,this$.toString(),not_found);
});
global.String.prototype.apply = (function (s,args){if((args.length < 2))
{return cljs.core.get.call(null,(args[0]),s);
} else
{return cljs.core.get.call(null,(args[0]),s,(args[1]));
}
});
global.Array.prototype.cljs$core$ISeqable$ = true;
global.Array.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){var coll__$1 = this;if(cljs.core.truth_((function (){var and__3396__auto__ = coll__$1;if(cljs.core.truth_(and__3396__auto__))
{return !((coll__$1.length === 0));
} else
{return and__3396__auto__;
}
})()))
{return (new cljs.core.IndexedSeq(coll__$1,0));
} else
{return null;
}
});
/**
* @param {...*} var_args
*/
lt.util.cljs.__GT_dottedkw = (function() { 
var __GT_dottedkw__delegate = function (args){return cljs.core.keyword.call(null,clojure.string.join.call(null,".",cljs.core.map.call(null,cljs.core.name,cljs.core.filter.call(null,cljs.core.identity,args))));
};
var __GT_dottedkw = function (var_args){
var args = null;if (arguments.length > 0) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);} 
return __GT_dottedkw__delegate.call(this,args);};
__GT_dottedkw.cljs$lang$maxFixedArity = 0;
__GT_dottedkw.cljs$lang$applyTo = (function (arglist__13537){
var args = cljs.core.seq(arglist__13537);
return __GT_dottedkw__delegate(args);
});
__GT_dottedkw.cljs$core$IFn$_invoke$arity$variadic = __GT_dottedkw__delegate;
return __GT_dottedkw;
})()
;
/**
* Recursively transforms JavaScript arrays into ClojureScript
* vectors, and JavaScript objects into ClojureScript maps.  With
* option ':keywordize-keys true' will convert object fields from
* strings to keywords.
* @param {...*} var_args
*/
lt.util.cljs.js__GT_clj = (function() {
var js__GT_clj = null;
var js__GT_clj__1 = (function (x){return js__GT_clj.call(null,x,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",4191781672),false], null));
});
var js__GT_clj__2 = (function() { 
var G__13558__delegate = function (x,opts){if((function (){var G__13548 = x;if(G__13548)
{var bit__4052__auto__ = null;if(cljs.core.truth_((function (){var or__3408__auto__ = bit__4052__auto__;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return G__13548.cljs$core$IEncodeClojure$;
}
})()))
{return true;
} else
{if((!G__13548.cljs$lang$protocol_mask$partition$))
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeClojure,G__13548);
} else
{return false;
}
}
} else
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeClojure,G__13548);
}
})())
{return cljs.core._js__GT_clj.call(null,x,cljs.core.apply.call(null,cljs.core.array_map,opts));
} else
{if(cljs.core.seq.call(null,opts))
{var map__13549 = opts;var map__13549__$1 = ((cljs.core.seq_QMARK_.call(null,map__13549))?cljs.core.apply.call(null,cljs.core.hash_map,map__13549):map__13549);var force_obj = cljs.core.get.call(null,map__13549__$1,new cljs.core.Keyword(null,"force-obj","force-obj",2540778119));var keywordize_keys = cljs.core.get.call(null,map__13549__$1,new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",4191781672));var keyfn = (cljs.core.truth_(keywordize_keys)?cljs.core.keyword:cljs.core.str);var f = ((function (map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn){
return (function thisfn(x__$1){if(cljs.core.seq_QMARK_.call(null,x__$1))
{return cljs.core.doall.call(null,cljs.core.map.call(null,thisfn,x__$1));
} else
{if(cljs.core.coll_QMARK_.call(null,x__$1))
{return cljs.core.into.call(null,cljs.core.empty.call(null,x__$1),cljs.core.map.call(null,thisfn,x__$1));
} else
{if((x__$1 instanceof cljs.core.Keyword))
{return x__$1;
} else
{if((x__$1 instanceof Array) || ((cljs.core.type.call(null,x__$1) === global.Array)))
{return cljs.core.vec.call(null,cljs.core.map.call(null,thisfn,x__$1));
} else
{if(cljs.core.truth_((function (){var or__3408__auto__ = force_obj;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return ((x__$1 === Object(x__$1))) || ((cljs.core.type.call(null,x__$1) === Object)) || ((cljs.core.type.call(null,x__$1) === global.Object));
}
})()))
{return cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4119__auto__ = ((function (map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn){
return (function iter__13554(s__13555){return (new cljs.core.LazySeq(null,((function (map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn){
return (function (){var s__13555__$1 = s__13555;while(true){
var temp__4092__auto__ = cljs.core.seq.call(null,s__13555__$1);if(temp__4092__auto__)
{var s__13555__$2 = temp__4092__auto__;if(cljs.core.chunked_seq_QMARK_.call(null,s__13555__$2))
{var c__4117__auto__ = cljs.core.chunk_first.call(null,s__13555__$2);var size__4118__auto__ = cljs.core.count.call(null,c__4117__auto__);var b__13557 = cljs.core.chunk_buffer.call(null,size__4118__auto__);if((function (){var i__13556 = 0;while(true){
if((i__13556 < size__4118__auto__))
{var k = cljs.core._nth.call(null,c__4117__auto__,i__13556);cljs.core.chunk_append.call(null,b__13557,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null,k),thisfn.call(null,(x__$1[k]))], null));
{
var G__13559 = (i__13556 + 1);
i__13556 = G__13559;
continue;
}
} else
{return true;
}
break;
}
})())
{return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__13557),iter__13554.call(null,cljs.core.chunk_rest.call(null,s__13555__$2)));
} else
{return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__13557),null);
}
} else
{var k = cljs.core.first.call(null,s__13555__$2);return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null,k),thisfn.call(null,(x__$1[k]))], null),iter__13554.call(null,cljs.core.rest.call(null,s__13555__$2)));
}
} else
{return null;
}
break;
}
});})(map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn))
,null,null));
});})(map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn))
;return iter__4119__auto__.call(null,cljs.core.js_keys.call(null,x__$1));
})());
} else
{if(new cljs.core.Keyword(null,"else","else",1017020587))
{return x__$1;
} else
{return null;
}
}
}
}
}
}
});})(map__13549,map__13549__$1,force_obj,keywordize_keys,keyfn))
;return f.call(null,x);
} else
{return null;
}
}
};
var G__13558 = function (x,var_args){
var opts = null;if (arguments.length > 1) {
  opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);} 
return G__13558__delegate.call(this,x,opts);};
G__13558.cljs$lang$maxFixedArity = 1;
G__13558.cljs$lang$applyTo = (function (arglist__13560){
var x = cljs.core.first(arglist__13560);
var opts = cljs.core.rest(arglist__13560);
return G__13558__delegate(x,opts);
});
G__13558.cljs$core$IFn$_invoke$arity$variadic = G__13558__delegate;
return G__13558;
})()
;
js__GT_clj = function(x,var_args){
var opts = var_args;
switch(arguments.length){
case 1:
return js__GT_clj__1.call(this,x);
default:
return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
}
throw(new Error('Invalid arity: ' + arguments.length));
};
js__GT_clj.cljs$lang$maxFixedArity = 1;
js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
return js__GT_clj;
})()
;
/**
* Recursively transforms ClojureScript values to JavaScript.
* sets/vectors/lists become Arrays, Keywords and Symbol become Strings,
* Maps become Objects. Arbitrary keys are encoded to by key->js.
*/
lt.util.cljs.clj__GT_js = (function clj__GT_js(x){if((x == null))
{return null;
} else
{if((function (){var G__13570 = x;if(G__13570)
{var bit__4052__auto__ = null;if(cljs.core.truth_((function (){var or__3408__auto__ = bit__4052__auto__;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return G__13570.cljs$core$IEncodeJS$;
}
})()))
{return true;
} else
{if((!G__13570.cljs$lang$protocol_mask$partition$))
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeJS,G__13570);
} else
{return false;
}
}
} else
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeJS,G__13570);
}
})())
{return cljs.core._clj__GT_js.call(null,x);
} else
{if((x instanceof cljs.core.Keyword))
{return cljs.core.name.call(null,x);
} else
{if((x instanceof cljs.core.Symbol))
{return [cljs.core.str(x)].join('');
} else
{if(cljs.core.map_QMARK_.call(null,x))
{var m = (function (){var obj13572 = {};return obj13572;
})();var seq__13573_13579 = cljs.core.seq.call(null,x);var chunk__13574_13580 = null;var count__13575_13581 = 0;var i__13576_13582 = 0;while(true){
if((i__13576_13582 < count__13575_13581))
{var vec__13577_13583 = cljs.core._nth.call(null,chunk__13574_13580,i__13576_13582);var k_13584 = cljs.core.nth.call(null,vec__13577_13583,0,null);var v_13585 = cljs.core.nth.call(null,vec__13577_13583,1,null);(m[cljs.core.key__GT_js.call(null,k_13584)] = clj__GT_js.call(null,v_13585));
{
var G__13586 = seq__13573_13579;
var G__13587 = chunk__13574_13580;
var G__13588 = count__13575_13581;
var G__13589 = (i__13576_13582 + 1);
seq__13573_13579 = G__13586;
chunk__13574_13580 = G__13587;
count__13575_13581 = G__13588;
i__13576_13582 = G__13589;
continue;
}
} else
{var temp__4092__auto___13590 = cljs.core.seq.call(null,seq__13573_13579);if(temp__4092__auto___13590)
{var seq__13573_13591__$1 = temp__4092__auto___13590;if(cljs.core.chunked_seq_QMARK_.call(null,seq__13573_13591__$1))
{var c__4150__auto___13592 = cljs.core.chunk_first.call(null,seq__13573_13591__$1);{
var G__13593 = cljs.core.chunk_rest.call(null,seq__13573_13591__$1);
var G__13594 = c__4150__auto___13592;
var G__13595 = cljs.core.count.call(null,c__4150__auto___13592);
var G__13596 = 0;
seq__13573_13579 = G__13593;
chunk__13574_13580 = G__13594;
count__13575_13581 = G__13595;
i__13576_13582 = G__13596;
continue;
}
} else
{var vec__13578_13597 = cljs.core.first.call(null,seq__13573_13591__$1);var k_13598 = cljs.core.nth.call(null,vec__13578_13597,0,null);var v_13599 = cljs.core.nth.call(null,vec__13578_13597,1,null);(m[cljs.core.key__GT_js.call(null,k_13598)] = clj__GT_js.call(null,v_13599));
{
var G__13600 = cljs.core.next.call(null,seq__13573_13591__$1);
var G__13601 = null;
var G__13602 = 0;
var G__13603 = 0;
seq__13573_13579 = G__13600;
chunk__13574_13580 = G__13601;
count__13575_13581 = G__13602;
i__13576_13582 = G__13603;
continue;
}
}
} else
{}
}
break;
}
return m;
} else
{if(cljs.core.coll_QMARK_.call(null,x))
{return cljs.core.apply.call(null,cljs.core.array,cljs.core.map.call(null,clj__GT_js,x));
} else
{if(new cljs.core.Keyword(null,"else","else",1017020587))
{return x;
} else
{return null;
}
}
}
}
}
}
}
});
lt.util.cljs.str_contains_QMARK_ = (function str_contains_QMARK_(str,x){return (str.indexOf(x) > -1);
});
lt.util.cljs.index_of = (function index_of(e,coll){return cljs.core.first.call(null,cljs.core.keep_indexed.call(null,(function (p1__13605_SHARP_,p2__13604_SHARP_){if(cljs.core._EQ_.call(null,e,p2__13604_SHARP_))
{return p1__13605_SHARP_;
} else
{return null;
}
}),coll));
});
